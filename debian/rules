#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
#
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.
#
# Modified to make a template file for a multi-binary package with separated
# build-arch and build-indep targets  by Bill Allombert 2001
#
# Modified by Sveinung Kvilhaugsvik. Any changes I have done are hereby
# released under the GPL or the license of nanoxml as stated in copyright

# This has to be exported to make some magic below work.
export DH_OPTIONS

JAVA_HOME?=/usr/lib/jvm/default-java
JFLAGS?=-source 1.4 -nowarn

SRCDIR := $(shell echo ./$(word $(words ${MAKEFILE_LIST}), ${MAKEFILE_LIST}) | \
sed -r "s/debian\/rules$$//")
VERSION := $(shell cd ${SRCDIR} && dpkg-parsechangelog | egrep '^Version:' | \
cut -f 2 -d ' ' | sed -r 's/\.dfsg(.)*//g')

NANOXML := nanoxml.jar
LITE := nanoxml-lite.jar
SAX := nanoxml-sax.jar

#Architecture
build: build-stamp

build-stamp:
	jh_build -o'${JFLAGS}' -N ${LITE} Sources/Lite/
	jh_build -o'${JFLAGS}' -N ${NANOXML} Sources/Java/
	CLASSPATH=${NANOXML} jh_build -o'${JFLAGS}' -N ${SAX} Sources/SAX/
	jh_manifest -c /usr/share/java/${NANOXML} ${SAX}

	bnd wrap --output $(NANOXML).tmp $(NANOXML)
	bnd wrap --output $(LITE).tmp $(LITE)
	bnd wrap --output $(SAX).tmp $(SAX)
	mv $(NANOXML).tmp $(NANOXML)
	mv $(LITE).tmp $(LITE)
	mv $(SAX).tmp $(SAX)

	${JAVA_HOME}/bin/javadoc -author -link /usr/share/doc/default-jdk-doc/api -quiet \
	-sourcepath Sources/Java/:Sources/Lite/:Sources/SAX/ -source 1.4 \
	nanoxml net.n3.nanoxml net.n3.nanoxml.sax -d api
	if [ $(filter nocheck, $(DEB_BUILD_OPTIONS)) ]; \
		then	echo "Disabeling tests"; \
		else	make -f debian/rules test; \
	fi;
	touch $@

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp test

	jh_clean
	rm ${SAX} ${NANOXML} ${LITE} *.bar || echo "no jars to remove"
	rm -rf api
	rm -rf Test/*/*.class
	rm -rf debian/orig.tmp || echo "No failed source fetch"

	dh_clean

install:
	dh_testdir
	dh_testroot
	dh_clean -k -i

	jh_installlibs -i
	jh_installjavadoc -plibnanoxml2-java-doc
	dh_install -i

# Must not depend on anything. This is to be called by
# binary-arch/binary-indep
# in another 'make' thread.
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs
	dh_installdocs
	dh_link
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb
# Build architecture independant packages using the common target.
binary-indep: build install
	$(MAKE) -f debian/rules DH_OPTIONS=-i binary-common

# Build architecture dependant packages using the common target.
binary-arch:

binary: binary-indep
.PHONY: build clean binary-indep binary install

test:
	set -e
	cd Test/Lite && \
	${JAVA_HOME}/bin/javac ${JFLAGS} -cp .:../../${LITE} `find -iname *.java` && \
	for TESTFILE in *.xml; \
		do if [ "`${JAVA_HOME}/bin/java -cp .:../../${LITE} DumpXML_Lite $${TESTFILE}`" != "`cat $${TESTFILE}.out`" ]; \
		then	echo ${LITE} failed $${TESTFILE}; \
			exit 1; \
		fi; \
	done

	cd Test/Java && \
	${JAVA_HOME}/bin/javac ${JFLAGS} -cp .:../../${NANOXML} `find -iname *.java` && \
	for TESTFILE in *.xml; \
		do if [ "`${JAVA_HOME}/bin/java -cp .:../../${NANOXML} DumpXML $${TESTFILE}`" != "`cat $${TESTFILE}.out`" ] ;\
		then	echo ${NANOXML} failed $${TESTFILE}; \
			exit 1; \
		fi; \
	done
	touch $@

get-orig-source:
	set -e
	sh ${SRCDIR}/debian/origCleaner.sh thisIsIgnored ${VERSION} alsoIgnored ${SRCDIR}/debian/orig.tmp
